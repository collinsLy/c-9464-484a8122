
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users can read and write their own user document
    match /users/{userId} {
      // Allow any authenticated user to read basic user data for verification purposes
      allow read: if isAuthenticated() || isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) 
        && request.resource.data.keys().hasAll(['email', 'createdAt'])
        && request.resource.data.get('balance', 0) is number
        && request.resource.data.get('balance', 0) >= 0;
      
      // Allow users to update their profile and allow asset transfers
      allow update: if (isOwner(userId) || (
          // Allow any authenticated user to update other users' assets and transactions for transfers
          isAuthenticated() && 
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['balance', 'assets']) ||
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['assets']) ||
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['balance', 'transactions']) ||
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['transactions']) ||
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['assets', 'transactions']))
        ));
      allow delete: if false;
    }
    
    // Users can read and write their own notifications
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || request.auth.uid == request.resource.data.userId);
    }
    
    // Users can read and write their own P2P notifications
    match /p2pNotifications/{notificationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // P2P Chat Messages
    match /p2pChatMessages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.sender == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.sender == request.auth.uid;
    }
    
    // P2P orders and offers
    match /p2pOrders/{orderId} {
      allow read: if true; // Allow public read for now
      allow create, update: if isAuthenticated(); // Must be logged in to create/update
      allow delete: if isAuthenticated() && 
                      (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    match /p2pOffers/{offerId} {
      allow read: if true; // Anyone can view offers
      allow create, update: if isAuthenticated(); // Must be logged in to create/update
      allow delete: if isAuthenticated() && 
                      (resource.data.userId == request.auth.uid || isAdmin()); 
    }
    
    // P2P transactions
    match /p2pTransactions/{transactionId} {
      allow read, write: if request.auth != null;
    }

    // Transaction history rules
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid || 
        resource.data.recipientId == request.auth.uid || 
        isAdmin()
      );
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.keys().hasAll(['senderId', 'recipientId', 'amount', 'timestamp', 'type']);
      allow update: if false;
      allow delete: if false;
    }

    // Trading positions rules
    match /trading_positions/{positionId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'symbol', 'amount', 'openPrice', 'openTime']);
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // System collection for global app settings
    match /system/{document} {
      allow read: if true; // Allow everyone to read system settings
      allow write: if isAuthenticated() && isAdmin(); // Only admins can write to system settings
    }

    // Support tickets collection
    match /support_tickets/{ticketId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated()
        && request.resource.data.keys().hasAll(['name', 'email', 'subject', 'message', 'userId', 'createdAt', 'status'])
        && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if false;
    }

    // Card application rules
    match /cardApplications/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) &&
        request.resource.data.keys().hasAll(['userId', 'userEmail', 'fullName', 'phoneNumber', 'createdAt']);
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }

    // User cards for the Vertex Card feature
    match /userCards/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) &&
        request.resource.data.keys().hasAll(['cardNumber', 'expiryMonth', 'expiryYear', 'cvv', 'createdAt']);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) || isAdmin();
    }

    // Notifications for card status updates
    match /users/{userId}/notifications/{notificationId} {
      allow read: if isOwner(userId);
      allow create: if isAuthenticated(); // Allow system and users to create notifications
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Allow authenticated users to read and write their own data (fallback rule)
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}
