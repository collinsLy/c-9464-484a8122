rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // System collection for global app settings
    match /system/{document} {
      allow read: if true; // Allow everyone to read system settings
      allow write: if isAuthenticated() && isAdmin(); // Only admins can write to system settings
    }

    // Support tickets collection
    match /support_tickets/{ticketId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated()
        && request.resource.data.keys().hasAll(['name', 'email', 'subject', 'message', 'userId', 'createdAt', 'status'])
        && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if false;
    }

    // User profile and balance rules
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Allow updates to followedTraders array
      allow update: if request.auth != null && 
                    request.auth.uid == userId && 
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followedTraders']);
    }

    // Transaction history
    match /users/{userId}/transactions/{transactionId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && (
        // Allow users to create their own transaction records
        isOwner(userId) ||
        // OR allow another user to create a transaction when transferring funds
        (
          request.resource.data.keys().hasAll(['amount', 'type', 'timestamp', 'senderId']) &&
          request.resource.data.type == 'internal_transfer' &&
          request.resource.data.senderId == request.auth.uid
        )
      );
      allow update, delete: if false;
    }

    // Trading positions
    match /users/{userId}/positions/{positionId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId)
        && request.resource.data.keys().hasAll(['symbol', 'amount', 'entryPrice', 'timestamp'])
        && request.resource.data.amount is number
        && request.resource.data.entryPrice is number;
      allow update: if isOwner(userId)
        && request.resource.data.amount is number;
      allow delete: if isOwner(userId);
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}