
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // System collection for global app settings
    match /system/{document} {
      allow read: if true; // Allow everyone to read system settings
      allow write: if isAuthenticated() && isAdmin(); // Only admins can write to system settings
    }

    // Support tickets collection
    match /support_tickets/{ticketId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated()
        && request.resource.data.keys().hasAll(['name', 'email', 'subject', 'message', 'userId', 'createdAt', 'status'])
        && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if false;
    }

    // User profile and balance rules
    match /users/{userId} {
      // Allow any authenticated user to read basic user data for verification purposes
      allow read: if isAuthenticated() || isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) 
        && request.resource.data.keys().hasAll(['email', 'createdAt'])
        && request.resource.data.get('balance', 0) is number
        && request.resource.data.get('balance', 0) >= 0;
      
      // Allow users to update their profile and allow asset transfers
      allow update: if (isOwner(userId) || (
          // Allow any authenticated user to update other users' assets and transactions for transfers
          isAuthenticated() && 
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['balance', 'assets']) ||
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['assets']) ||
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['balance', 'transactions']) ||
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['transactions']) ||
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['assets', 'transactions']))
        ));
      allow delete: if false;
    }

    // Transaction history rules
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid || 
        resource.data.recipientId == request.auth.uid || 
        isAdmin()
      );
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.keys().hasAll(['senderId', 'recipientId', 'amount', 'timestamp', 'type']);
      allow update: if false;
      allow delete: if false;
    }

    // Trading positions rules
    match /trading_positions/{positionId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'symbol', 'amount', 'openPrice', 'openTime']);
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}