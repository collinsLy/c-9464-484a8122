[plugin:vite:react-swc] × the name `DexTokenAlert` is defined multiple times
    ╭─[/home/runner/workspace/src/pages/DexScreenerPage.tsx:12:1]
  9 │ import { Skeleton } from "@/components/ui/skeleton";
 10 │ import { Search, ArrowUpRight, Shield, Clock, AlertTriangle, TrendingUp, DollarSign, RefreshCw } from "lucide-react";
 11 │ import DashboardLayout from "@/components/dashboard/DashboardLayout";
 12 │ import { DexTokenAlert } from "@/components/markets/DexTokenAlert";
    ·          ──────┬──────
    ·                ╰── previous definition of `DexTokenAlert` here
 13 │ import { toast } from "sonner";
 14 │ import { DexPair, fetchPairsByChain } from "@/lib/dexscreener-service";
 15 │ 
 16 │ const DexScreenerPage = () => {
 17 │   const [pairs, setPairs] = useState<DexPair[]>([]);
 18 │   const [loading, setLoading] = useState(true);
 19 │   const [error, setError] = useState<string | null>(null);
 20 │ 
 21 │   useEffect(() => {
 22 │     const fetchPairs = async () => {
 23 │       try {
 24 │         const data = await fetchPairsByChain('ethereum'); //Example chain, needs to be configurable
 25 │         setPairs(data);
 26 │       } catch (err: any) {
 27 │         setError(err.message);
 28 │       } finally {
 29 │         setLoading(false);
 30 │       }
 31 │     };
 32 │ 
 33 │     fetchPairs();
 34 │   }, []);
 35 │ 
 36 │   if (loading) return <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="36" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Loading...%22%7D">Loading...</p>;
 37 │   if (error) return <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="37" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Error%3A%22%7D">Error: {error}</p>;
 38 │ 
 39 │   return (
 40 │     <DashboardLayout data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="DashboardLayout" data-component-line="40" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
 41 │       <div data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="div" data-component-line="41" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
 42 │         <h1 data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="h1" data-component-line="42" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Dex%20Screener%22%7D">Dex Screener</h1>
 43 │         <div data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="div" data-component-line="43" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
 44 │           {pairs.map((pair) => (
 45 │             <DexTokenAlert data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="DexTokenAlert" data-component-line="45" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D" key={pair.pairAddress} pair={pair} />
 46 │           ))}
 47 │         </div>
 48 │       </div>
 49 │     </DashboardLayout>
 50 │   );
 51 │ };
 52 │ 
 53 │ export default DexScreenerPage;
 54 │ 
 55 │ 
 56 │ // components/markets/DexTokenAlert.tsx
 57 │ import React from 'react';
 58 │ import { DexPair } from '@/lib/dexscreener-service';
 59 │ 
 60 │ interface DexTokenAlertProps {
 61 │   pair: DexPair;
 62 │ }
 63 │ 
 64 │ const DexTokenAlert: React.FC<DexTokenAlertProps> = ({ pair }) => {
    ·       ──────┬──────
    ·             ╰── `DexTokenAlert` redefined here
 65 │   return (
 66 │     <div data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="div" data-component-line="66" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
 67 │       <h3 data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="h3" data-component-line="67" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22%2F%22%7D">{pair.token0.symbol}/{pair.token1.symbol}</h3>
    ╰────
  × the name `fetchPairsByChain` is defined multiple times
    ╭─[/home/runner/workspace/src/pages/DexScreenerPage.tsx:14:1]
 11 │ import DashboardLayout from "@/components/dashboard/DashboardLayout";
 12 │ import { DexTokenAlert } from "@/components/markets/DexTokenAlert";
 13 │ import { toast } from "sonner";
 14 │ import { DexPair, fetchPairsByChain } from "@/lib/dexscreener-service";
    ·                   ────────┬────────
    ·                           ╰── previous definition of `fetchPairsByChain` here
 15 │ 
 16 │ const DexScreenerPage = () => {
 17 │   const [pairs, setPairs] = useState<DexPair[]>([]);
 18 │   const [loading, setLoading] = useState(true);
 19 │   const [error, setError] = useState<string | null>(null);
 20 │ 
 21 │   useEffect(() => {
 22 │     const fetchPairs = async () => {
 23 │       try {
 24 │         const data = await fetchPairsByChain('ethereum'); //Example chain, needs to be configurable
 25 │         setPairs(data);
 26 │       } catch (err: any) {
 27 │         setError(err.message);
 28 │       } finally {
 29 │         setLoading(false);
 30 │       }
 31 │     };
 32 │ 
 33 │     fetchPairs();
 34 │   }, []);
 35 │ 
 36 │   if (loading) return <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="36" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Loading...%22%7D">Loading...</p>;
 37 │   if (error) return <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="37" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Error%3A%22%7D">Error: {error}</p>;
 38 │ 
 39 │   return (
 40 │     <DashboardLayout data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="DashboardLayout" data-component-line="40" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
 41 │       <div data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="div" data-component-line="41" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
 42 │         <h1 data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="h1" data-component-line="42" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Dex%20Screener%22%7D">Dex Screener</h1>
 43 │         <div data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="div" data-component-line="43" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
 44 │           {pairs.map((pair) => (
 45 │             <DexTokenAlert data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="DexTokenAlert" data-component-line="45" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D" key={pair.pairAddress} pair={pair} />
 46 │           ))}
 47 │         </div>
 48 │       </div>
 49 │     </DashboardLayout>
 50 │   );
 51 │ };
 52 │ 
 53 │ export default DexScreenerPage;
 54 │ 
 55 │ 
 56 │ // components/markets/DexTokenAlert.tsx
 57 │ import React from 'react';
 58 │ import { DexPair } from '@/lib/dexscreener-service';
 59 │ 
 60 │ interface DexTokenAlertProps {
 61 │   pair: DexPair;
 62 │ }
 63 │ 
 64 │ const DexTokenAlert: React.FC<DexTokenAlertProps> = ({ pair }) => {
 65 │   return (
 66 │     <div data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="div" data-component-line="66" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
 67 │       <h3 data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="h3" data-component-line="67" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22%2F%22%7D">{pair.token0.symbol}/{pair.token1.symbol}</h3>
 68 │       <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="68" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Volume%3A%22%7D">Volume: {pair.volume24h}</p>
 69 │       <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="69" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Liquidity%3A%22%7D">Liquidity: {pair.liquidity}</p>
 70 │       {/* Add more details as needed */}
 71 │     </div>
 72 │   );
 73 │ };
 74 │ 
 75 │ export default DexTokenAlert;
 76 │ 
 77 │ 
 78 │ // lib/dexscreener-service.ts
 79 │ // This is a placeholder, needs actual API interaction logic
 80 │ export interface DexPair {
 81 │   pairAddress: string;
 82 │   token0: { symbol: string; };
 83 │   token1: { symbol: string; };
 84 │   volume24h: string;
 85 │   liquidity: string;
 86 │   // Add other relevant fields
 87 │ }
 88 │ 
 89 │ 
 90 │ export const fetchPairsByChain = async (chainId: string): Promise<DexPair[]> => {
    ·              ────────┬────────
    ·                      ╰── `fetchPairsByChain` redefined here
 91 │   // Replace with actual API call to DexScreener
 92 │   //  const response = await fetch(`https://api.dexscreener.com/latest/dex/pairs?chainId=${chainId}`);
 93 │   //  const data = await response.json();
    ╰────
  × the name `DashboardLayout` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/DexScreenerPage.tsx:11:1]
   8 │ import { ScrollArea } from "@/components/ui/scroll-area";
   9 │ import { Skeleton } from "@/components/ui/skeleton";
  10 │ import { Search, ArrowUpRight, Shield, Clock, AlertTriangle, TrendingUp, DollarSign, RefreshCw } from "lucide-react";
  11 │ import DashboardLayout from "@/components/dashboard/DashboardLayout";
     ·        ───────┬───────
     ·               ╰── previous definition of `DashboardLayout` here
  12 │ import { DexTokenAlert } from "@/components/markets/DexTokenAlert";
  13 │ import { toast } from "sonner";
  14 │ import { DexPair, fetchPairsByChain } from "@/lib/dexscreener-service";
  15 │ 
  16 │ const DexScreenerPage = () => {
  17 │   const [pairs, setPairs] = useState<DexPair[]>([]);
  18 │   const [loading, setLoading] = useState(true);
  19 │   const [error, setError] = useState<string | null>(null);
  20 │ 
  21 │   useEffect(() => {
  22 │     const fetchPairs = async () => {
  23 │       try {
  24 │         const data = await fetchPairsByChain('ethereum'); //Example chain, needs to be configurable
  25 │         setPairs(data);
  26 │       } catch (err: any) {
  27 │         setError(err.message);
  28 │       } finally {
  29 │         setLoading(false);
  30 │       }
  31 │     };
  32 │ 
  33 │     fetchPairs();
  34 │   }, []);
  35 │ 
  36 │   if (loading) return <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="36" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Loading...%22%7D">Loading...</p>;
  37 │   if (error) return <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="37" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Error%3A%22%7D">Error: {error}</p>;
  38 │ 
  39 │   return (
  40 │     <DashboardLayout data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="DashboardLayout" data-component-line="40" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
  41 │       <div data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="div" data-component-line="41" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
  42 │         <h1 data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="h1" data-component-line="42" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Dex%20Screener%22%7D">Dex Screener</h1>
  43 │         <div data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="div" data-component-line="43" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
  44 │           {pairs.map((pair) => (
  45 │             <DexTokenAlert data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="DexTokenAlert" data-component-line="45" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D" key={pair.pairAddress} pair={pair} />
  46 │           ))}
  47 │         </div>
  48 │       </div>
  49 │     </DashboardLayout>
  50 │   );
  51 │ };
  52 │ 
  53 │ export default DexScreenerPage;
  54 │ 
  55 │ 
  56 │ // components/markets/DexTokenAlert.tsx
  57 │ import React from 'react';
  58 │ import { DexPair } from '@/lib/dexscreener-service';
  59 │ 
  60 │ interface DexTokenAlertProps {
  61 │   pair: DexPair;
  62 │ }
  63 │ 
  64 │ const DexTokenAlert: React.FC<DexTokenAlertProps> = ({ pair }) => {
  65 │   return (
  66 │     <div data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="div" data-component-line="66" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
  67 │       <h3 data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="h3" data-component-line="67" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22%2F%22%7D">{pair.token0.symbol}/{pair.token1.symbol}</h3>
  68 │       <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="68" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Volume%3A%22%7D">Volume: {pair.volume24h}</p>
  69 │       <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="69" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Liquidity%3A%22%7D">Liquidity: {pair.liquidity}</p>
  70 │       {/* Add more details as needed */}
  71 │     </div>
  72 │   );
  73 │ };
  74 │ 
  75 │ export default DexTokenAlert;
  76 │ 
  77 │ 
  78 │ // lib/dexscreener-service.ts
  79 │ // This is a placeholder, needs actual API interaction logic
  80 │ export interface DexPair {
  81 │   pairAddress: string;
  82 │   token0: { symbol: string; };
  83 │   token1: { symbol: string; };
  84 │   volume24h: string;
  85 │   liquidity: string;
  86 │   // Add other relevant fields
  87 │ }
  88 │ 
  89 │ 
  90 │ export const fetchPairsByChain = async (chainId: string): Promise<DexPair[]> => {
  91 │   // Replace with actual API call to DexScreener
  92 │   //  const response = await fetch(`https://api.dexscreener.com/latest/dex/pairs?chainId=${chainId}`);
  93 │   //  const data = await response.json();
  94 │   //  return data.pairs; // Adjust based on API response structure.
  95 │ 
  96 │ 
  97 │   // Mock data for demonstration
  98 │   return [
  99 │     { pairAddress: '0x123', token0: { symbol: 'ETH' }, token1: { symbol: 'USDC' }, volume24h: '1000', liquidity: '5000' },
 100 │     { pairAddress: '0x456', token0: { symbol: 'BTC' }, token1: { symbol: 'USDT' }, volume24h: '2000', liquidity: '10000' },
 101 │   ];
 102 │ };
 103 │ 
 104 │ 
 105 │ 
 106 │ // pages/index.tsx (App.tsx) -  Assume this is your main app file.  Update routing.
 107 │ import { createBrowserRouter, RouterProvider } from 'react-router-dom';
 108 │ import DashboardLayout from '@/components/dashboard/DashboardLayout';
     ·        ───────┬───────
     ·               ╰── `DashboardLayout` redefined here
 109 │ import DashboardPage from '@/pages/dashboard';
 110 │ import DexScreenerPage from '@/pages/dexscreener';
     ╰────
  × the name `DexScreenerPage` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/DexScreenerPage.tsx:16:1]
  13 │ import { toast } from "sonner";
  14 │ import { DexPair, fetchPairsByChain } from "@/lib/dexscreener-service";
  15 │ 
  16 │ const DexScreenerPage = () => {
     ·       ───────┬───────
     ·              ╰── previous definition of `DexScreenerPage` here
  17 │   const [pairs, setPairs] = useState<DexPair[]>([]);
  18 │   const [loading, setLoading] = useState(true);
  19 │   const [error, setError] = useState<string | null>(null);
  20 │ 
  21 │   useEffect(() => {
  22 │     const fetchPairs = async () => {
  23 │       try {
  24 │         const data = await fetchPairsByChain('ethereum'); //Example chain, needs to be configurable
  25 │         setPairs(data);
  26 │       } catch (err: any) {
  27 │         setError(err.message);
  28 │       } finally {
  29 │         setLoading(false);
  30 │       }
  31 │     };
  32 │ 
  33 │     fetchPairs();
  34 │   }, []);
  35 │ 
  36 │   if (loading) return <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="36" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Loading...%22%7D">Loading...</p>;
  37 │   if (error) return <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="37" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Error%3A%22%7D">Error: {error}</p>;
  38 │ 
  39 │   return (
  40 │     <DashboardLayout data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="DashboardLayout" data-component-line="40" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
  41 │       <div data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="div" data-component-line="41" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
  42 │         <h1 data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="h1" data-component-line="42" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Dex%20Screener%22%7D">Dex Screener</h1>
  43 │         <div data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="div" data-component-line="43" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
  44 │           {pairs.map((pair) => (
  45 │             <DexTokenAlert data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="DexTokenAlert" data-component-line="45" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D" key={pair.pairAddress} pair={pair} />
  46 │           ))}
  47 │         </div>
  48 │       </div>
  49 │     </DashboardLayout>
  50 │   );
  51 │ };
  52 │ 
  53 │ export default DexScreenerPage;
  54 │ 
  55 │ 
  56 │ // components/markets/DexTokenAlert.tsx
  57 │ import React from 'react';
  58 │ import { DexPair } from '@/lib/dexscreener-service';
  59 │ 
  60 │ interface DexTokenAlertProps {
  61 │   pair: DexPair;
  62 │ }
  63 │ 
  64 │ const DexTokenAlert: React.FC<DexTokenAlertProps> = ({ pair }) => {
  65 │   return (
  66 │     <div data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="div" data-component-line="66" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
  67 │       <h3 data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="h3" data-component-line="67" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22%2F%22%7D">{pair.token0.symbol}/{pair.token1.symbol}</h3>
  68 │       <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="68" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Volume%3A%22%7D">Volume: {pair.volume24h}</p>
  69 │       <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="69" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Liquidity%3A%22%7D">Liquidity: {pair.liquidity}</p>
  70 │       {/* Add more details as needed */}
  71 │     </div>
  72 │   );
  73 │ };
  74 │ 
  75 │ export default DexTokenAlert;
  76 │ 
  77 │ 
  78 │ // lib/dexscreener-service.ts
  79 │ // This is a placeholder, needs actual API interaction logic
  80 │ export interface DexPair {
  81 │   pairAddress: string;
  82 │   token0: { symbol: string; };
  83 │   token1: { symbol: string; };
  84 │   volume24h: string;
  85 │   liquidity: string;
  86 │   // Add other relevant fields
  87 │ }
  88 │ 
  89 │ 
  90 │ export const fetchPairsByChain = async (chainId: string): Promise<DexPair[]> => {
  91 │   // Replace with actual API call to DexScreener
  92 │   //  const response = await fetch(`https://api.dexscreener.com/latest/dex/pairs?chainId=${chainId}`);
  93 │   //  const data = await response.json();
  94 │   //  return data.pairs; // Adjust based on API response structure.
  95 │ 
  96 │ 
  97 │   // Mock data for demonstration
  98 │   return [
  99 │     { pairAddress: '0x123', token0: { symbol: 'ETH' }, token1: { symbol: 'USDC' }, volume24h: '1000', liquidity: '5000' },
 100 │     { pairAddress: '0x456', token0: { symbol: 'BTC' }, token1: { symbol: 'USDT' }, volume24h: '2000', liquidity: '10000' },
 101 │   ];
 102 │ };
 103 │ 
 104 │ 
 105 │ 
 106 │ // pages/index.tsx (App.tsx) -  Assume this is your main app file.  Update routing.
 107 │ import { createBrowserRouter, RouterProvider } from 'react-router-dom';
 108 │ import DashboardLayout from '@/components/dashboard/DashboardLayout';
 109 │ import DashboardPage from '@/pages/dashboard';
 110 │ import DexScreenerPage from '@/pages/dexscreener';
     ·        ───────┬───────
     ·               ╰── `DexScreenerPage` redefined here
 111 │ 
 112 │ 
 113 │ const router = createBrowserRouter([
     ╰────
  × the name `default` is exported multiple times
    ╭─[/home/runner/workspace/src/pages/DexScreenerPage.tsx:53:1]
 50 │   );
 51 │ };
 52 │ 
 53 │ export default DexScreenerPage;
    · ───────────────┬───────────────
    ·                ╰── previous exported here
 54 │ 
 55 │ 
 56 │ // components/markets/DexTokenAlert.tsx
 57 │ import React from 'react';
 58 │ import { DexPair } from '@/lib/dexscreener-service';
 59 │ 
 60 │ interface DexTokenAlertProps {
 61 │   pair: DexPair;
 62 │ }
 63 │ 
 64 │ const DexTokenAlert: React.FC<DexTokenAlertProps> = ({ pair }) => {
 65 │   return (
 66 │     <div data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="div" data-component-line="66" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
 67 │       <h3 data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="h3" data-component-line="67" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22%2F%22%7D">{pair.token0.symbol}/{pair.token1.symbol}</h3>
 68 │       <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="68" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Volume%3A%22%7D">Volume: {pair.volume24h}</p>
 69 │       <p data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="p" data-component-line="69" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Liquidity%3A%22%7D">Liquidity: {pair.liquidity}</p>
 70 │       {/* Add more details as needed */}
 71 │     </div>
 72 │   );
 73 │ };
 74 │ 
 75 │ export default DexTokenAlert;
    · ──────────────┬──────────────
    ·               ╰── exported more than once
 76 │ 
 77 │ 
 78 │ // lib/dexscreener-service.ts
    ╰────

Advice:   ☞ Exported identifiers must be unique
  × the name `default` is exported multiple times
     ╭─[/home/runner/workspace/src/pages/DexScreenerPage.tsx:75:1]
  72 │       );
  73 │     };
  74 │     
  75 │     export default DexTokenAlert;
     ·     ──────────────┬──────────────
     ·                   ╰── previous exported here
  76 │     
  77 │     
  78 │     // lib/dexscreener-service.ts
  79 │     // This is a placeholder, needs actual API interaction logic
  80 │     export interface DexPair {
  81 │       pairAddress: string;
  82 │       token0: { symbol: string; };
  83 │       token1: { symbol: string; };
  84 │       volume24h: string;
  85 │       liquidity: string;
  86 │       // Add other relevant fields
  87 │     }
  88 │     
  89 │     
  90 │     export const fetchPairsByChain = async (chainId: string): Promise<DexPair[]> => {
  91 │       // Replace with actual API call to DexScreener
  92 │       //  const response = await fetch(`https://api.dexscreener.com/latest/dex/pairs?chainId=${chainId}`);
  93 │       //  const data = await response.json();
  94 │       //  return data.pairs; // Adjust based on API response structure.
  95 │     
  96 │     
  97 │       // Mock data for demonstration
  98 │       return [
  99 │         { pairAddress: '0x123', token0: { symbol: 'ETH' }, token1: { symbol: 'USDC' }, volume24h: '1000', liquidity: '5000' },
 100 │         { pairAddress: '0x456', token0: { symbol: 'BTC' }, token1: { symbol: 'USDT' }, volume24h: '2000', liquidity: '10000' },
 101 │       ];
 102 │     };
 103 │     
 104 │     
 105 │     
 106 │     // pages/index.tsx (App.tsx) -  Assume this is your main app file.  Update routing.
 107 │     import { createBrowserRouter, RouterProvider } from 'react-router-dom';
 108 │     import DashboardLayout from '@/components/dashboard/DashboardLayout';
 109 │     import DashboardPage from '@/pages/dashboard';
 110 │     import DexScreenerPage from '@/pages/dexscreener';
 111 │     
 112 │     
 113 │     const router = createBrowserRouter([
 114 │       {
 115 │         path: '/',
 116 │         element: <DashboardLayout data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="DashboardLayout" data-component-line="116" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D" />,
 117 │         children: [
 118 │           { path: '/', element: <DashboardPage data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="DashboardPage" data-component-line="118" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D" /> },
 119 │           { path: '/dexscreener', element: <DexScreenerPage data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="DexScreenerPage" data-component-line="119" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D" /> }
 120 │         ]
 121 │       }
 122 │     ]);
 123 │     
 124 │     
 125 │ ╭─▶ export default function App() {
 126 │ │     return (
 127 │ │       <RouterProvider data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="RouterProvider" data-component-line="127" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D" router={router} />
 128 │ │     );
 129 │ ├─▶ }
     · ╰──── exported more than once
 130 │     
 131 │     
 132 │     // components/dashboard/DashboardSidebar.tsx - Add a new link
     ╰────

Advice:   ☞ Exported identifiers must be unique
  × the name `default` is exported multiple times
     ╭─[/home/runner/workspace/src/pages/DexScreenerPage.tsx:125:1]
 122 │     ]);
 123 │     
 124 │     
 125 │ ╭─▶ export default function App() {
 126 │ │     return (
 127 │ │       <RouterProvider data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="RouterProvider" data-component-line="127" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D" router={router} />
 128 │ │     );
 129 │ ├─▶ }
     · ╰──── previous exported here
 130 │     
 131 │     
 132 │     // components/dashboard/DashboardSidebar.tsx - Add a new link
 133 │     // Assume this component exists and has a way to add links. Replace with your existing code structure
 134 │     import Link from 'next/link'; // Or your routing library
 135 │     
 136 │     // ... other imports and code ...
 137 │     
 138 │     const DashboardSidebar = () => {
 139 │         // ... your existing code ...
 140 │         return (
 141 │             <aside data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="aside" data-component-line="141" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%7D">
 142 │                 {/* ... your existing links ... */}
 143 │                 <Link data-component-path="src/pages/DexScreenerPage.tsx" data-component-name="Link" data-component-line="143" data-component-file="DexScreenerPage.tsx" data-component-content="%7B%22text%22%3A%22Dex%20Screener%22%7D" href="/dexscreener">Dex Screener</Link>
 144 │                 {/* ... rest of your sidebar */}
 145 │             </aside>
 146 │         );
 147 │     };
 148 │     
 149 │     export default DashboardSidebar;
     ·     ────────────────┬───────────────
     ·                     ╰── exported more than once
     ╰────

Advice:   ☞ Exported identifiers must be unique